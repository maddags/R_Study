accident
sum(accident)
max(accident)
max(accident) ; min(accident)
accident * 0.9
accident[accient> 50]
accident[accident> 50]
names(accident[accident> 50])
names(accident[accident >= 50])
length(accident[accidnet < 50])
length(accident[accident < 50])
M6.acc <- accident[6]
accident[accident > M6.acc]
accident[accident > accident[6]]
z <- matrix(1:20, nrow = , ncol = 5) ; z
matrix(1:20)
z <- matrix(1:20, nrow = , ncol = 5) ; z
x <- 1:4
y <- 5:8
z <- matrix(1:20,nrow = 4, ncol = 5)
m1 <- cbind(x,y); m1
m2 <- rbind(x,y); m2
m3 <- rbind(m2,x) ; m3
m4 <- cbind(z,x) ; m4
# 5-3
z <- matrix(1:20 , nrow = 4, ncol = 5) ; z
z[2,3]
z[1,4]
z[2,]
z[,4]
# 5-4
z
# 5-4
z <- matrix(1:20 , nrow = 4, ncol = 5) ; z
z[2,1:3]
z[1,c(1,2,4)]
z[1:2,]
z[,c(1,4)]
# 5-5
score <- matrix(c(90,85,69,78,85,96,49,95,90,80,70,60), nrow =4)
# 5-5
score <- matrix(c(90,85,69,78,85,96,49,95,90,80,70,60), nrow =4) ; score
rownames(score) <- c("John", "Tom", "Mark", "Jane")
colnames(score) <- c("English", "Math", "Science")
score
# 5-6
score['John',"Math"]
score['Tom',c("Math,Science")]
score['Tom',c("Math","Science")]
score["Mark",]
score[,"English"]
rownames(score)
colnames(score)
colnames(score)[2]
# 햄버거 영양 성분 정보
burger <- matrix(c(514,533,566,
917,853,888,
11,13,10),
nrow = 3,
byrow = T)
burger
rownames(burger) <- c("M","L","B")
colnames(burger) <- c("kcal","na","fat")
burger
burger["M","na"]
burger["M",]
burger[,"kcal"]
#
m <- matrix(c(1:5))
#
m <- matrix(c(1:5)) ; m
m <- matrix(c(1:10),nrow = 2)
m <- matrix(c(1:10),nrow = 2) ; m
m <- matrix(c(1:11),nrow = 2) ; m
m <- matrix(10:19,2)
m <- matrix(10:19,2) ; m
mode(m)
class(m)
mode(m) # 행렬 객채에 대한 자료형형
class(m) # 행렬 객체에 대한 자료구조 보기
mode(m) # 행렬 객체에 대한 자료형
m <- matrix(1:9, nrow =3 , ncol =3) ; m
apply(m,1,max)
apply(m,1,min)
apply(m,1,mean)
apply(m,2,max)  # 각각의 행들의 값들 중 제일 큰 값
apply(m,2,min)  # 각각의 행들의 값들 중 제일 작은 값
apply(m,2,mean)  # 각각의 행들의 평균
# 5-7
city <- c("Seoul", "Tokyo", "Washington")
rank <- c(1,3,2)
city.info <- data.frame(city,rank) ; city.info
iris
iris[,c(1:2)]
iris[,c(1,3,5)]
iris[,c("Sepal.Lenth","Species")]
iris[,c("Sepal.LenGth","Species")]
iris[,c("Sepal.Length","Species")]
iris[1:5,]
iris[1:5,c(1,3)]
# Lab 05-2(햄버거 영양 성분 정보)
kcal <- c(514,533,566)
na <- c(917,853,888)
fat <- c(11,13,10)
menu <- c("새우","불고기","치킨")
burger <- data.frame(kcal,na,fat,menu) ; burger
rownames(burger) <- c("M","L","B")
burger["M","na"]
burger["M",]
burger[,"kcal"]
burger[c("M","B"),"menu"]
Vec1 <- rep("R",5)
condi <- a[a %% 3 == 0 & a < 100]
# 1)
a <- 25:150
condi <- a[a %% 3 == 0 & a < 100]
length(condi)
# 1)
a <- 25:150
condi <- a[a %% 3 == 0 & a < 100]
length(condi)
# 2)
satisfaction <- c("good", "great","bad","okay","good","bad","good")
f <- factor(satisfaction)
levels(f)
item <- c("운동화","바지","티쳐스")
price <- c(76000,52000,36000)
discount <- c(0.95,0.9,0.95)
item <- c(76000,52000,36000)
discount <- c(0.05,0.1,0.05)
price <- items * (1-discount)
items <- c(76000,52000,36000)
discount <- c(0.05,0.1,0.05)
price <- items * (1-discount)
price
names(weight) <- c("a","b","c","d","e","f","g","h","i","j","k")
weight <- c(56,23,89,46,76,14,97,72,68,62,35)
names(weight) <- c("a","b","c","d","e","f","g","h","i","j","k")
sum(weight)
list = []
list = list[]
list = c()
for i in c(1:length(weight)){
for (i in c(1:length(weight))){
safe <- weight[-i]
if (sum(safe) < 600) {
list <- weight[i]
}
}
list
for (i in c(1:length(weight))){
safe <- weight[-i]
if (sum(safe) < 600) {
list <- list[weight[i]]
}
}
list
for (i in c(1:length(weight))){
safe <- weight[-i]
if (sum(safe) < 600) {
list <- c(list,weight[i])
}
}
list
weight <- c(56,23,89,46,76,14,97,72,68,62,35)
names(weight) <- c("a","b","c","d","e","f","g","h","i","j","k")
list = c()
for (i in c(1:length(weight))){
safe <- weight[-i]
if (sum(safe) < 600) {
list <- c(list,weight[i])
}
}
list
min(list)
names(min(list))
min(list)
list
list[min(list)]
list[list[min(list)]]
list
names(list)
min(list)
list[list == 46]
list[list == min(list)]
post = list(user_id = mr_steve)
post = list(user_id = "mr_steve")
post = list(user_id = "mr_steve",post_id = "p11010",view = 37,
image = FALSE, like = c("creeper","alex","skeleton","enderman"))
post
point <- c(7,7,8,8,9,10,10,11,20)
answer_sheet <- c(1,3,2,2,4,1,5,2,3,1)
mark <- c(1,3,1,2,4,2,5,2,5,1)
#1)
length(answer_sheet == mark)
#1)
answer_sheet == mark
#1)
sum(answer_sheet == mark)
#2)
(answer_sheet == mark) * point
#2)
sum((answer_sheet == mark) * point)
#3)
for (i in 1:length(point)){
if (point >= 9 & point <= 11){
point[i] = 10
}
}
#3)
for (i in 1:length(point)){
if (point >= 9 & point <= 11){
point[i] = 10
}
}
#2)
mark[1,2,3,4,]
#2)
mark[1,2,3,4]
#2)
mark[1:4]
#2)
right = answer_sheet == mark
#2)
right = mark[answer_sheet == mark]
#2)
right = which(mark[answer_sheet == mark])
#2)
which(right)
#2)
which(answer_sheet == mark)
#2)
point[which(answer_sheet == mark)]
point <- c(7,7,8,8,9,10,10,10,11,20)
answer_sheet <- c(1,3,2,2,4,1,5,2,3,1)
mark <- c(1,3,1,2,4,2,5,2,5,1)
#1)
sum(answer_sheet == mark)
#2)
point[which(answer_sheet == mark)]
#2)
sum(point[which(answer_sheet == mark)])
for (i in i:ncol(com)){
cat(com[,i],"\n")
}
for (i in i:ncol(com)){
cat(com[,i],"\n")
}
#11-14
combn(1:5,3)
x <- c("red","green","blue","black","white")
com <- combn(x,2)
com
for (i in i:ncol(com)){
cat(com[,i],"\n")
}
cat(com[,i],"\n")
for(i in i:ncol(com)){
cat(com[,i],"\n")
}
#Lab 11_2
library(carData)
str[KosteckiDillon]
str(KosteckiDillon)
tot.mom <- mean(KosteckiDillon$dos)
tot.mom
for(rate in (1:5)*0.1){
set.seed(100)
idx <- sample(nrow(KosteckiDillon), nrwo(KosteckiDillon)*rate)
sam.data <- KosteckiDillon[idx,"dos"]
tmp.mean <- mean(sam.data)
cat("Diff:",rate,tot.mean-tmp.mean. "\n")
}
for(rate in (1:5)*0.1){
set.seed(100)
idx <- sample(nrow(KosteckiDillon), nrwo(KosteckiDillon)*rate)
sam.data <- KosteckiDillon[idx,"dos"]
tmp.mean <- mean(sam.data)
cat("Diff:",rate,tot.mean-tmp.mean, "\n")
}
for(rate in (1:5)*0.1){
set.seed(100)
idx <- sample(nrow(KosteckiDillon), nrow(KosteckiDillon)*rate)
sam.data <- KosteckiDillon[idx,"dos"]
tmp.mean <- mean(sam.data)
cat("Diff:",rate,tot.mean-tmp.mean, "\n")
}
cat("Diff:",rate,tot.mom-tmp.mean, "\n")
for(rate in (1:5)*0.1){
set.seed(100)
idx <- sample(nrow(KosteckiDillon), nrow(KosteckiDillon)*rate)
sam.data <- KosteckiDillon[idx,"dos"]
tmp.mean <- mean(sam.data)
cat("Diff:",rate,tot.mom-tmp.mean, "\n")
}
cbn <- combn(1:5,3)
cbn
ncol(cbn)
#11-15
agg <- aggregate(iris[,-5], by = list(iris$Species),
FUN=mean)
agg
#11-16
agg <- aggregate(iris[,-5], by = list(품종 = iris$Species), FUN=sd)
agg
#11-17
head(mtcars)
agg <- aggregate(mtcars,by = list(cyl = mtcars$cyl,
vs = mtcars$vs),
FUN = max)
agg
#Lab 11-3
## 1)
library(carData)
data("CES11")
str(CES11)
## 2)
table(CES11$abortion)
table(CES11$abortion)/nrow(CES11)
agg <- aggregate(CES11[,"abortion"], by = list(성별 = CES11$gender), FUN = table)
agg.2 <- agg[,2]
agg.2[1,] <- agg.2[1,]/sum(agg.2[1,])
agg.2[2,] <- agg.2[2,]/sum(agg.2[2,])
agg.2[1,] <- agg.2[1,]/sum(agg.2[1,])
agg.2[2,] <- agg.2[2,]/sum(agg.2[2,])
rownames(agg.2) <- agg[,1]
agg.2
iris
iris$Sepal.Length
library(ggplot2)
iris
type(iris)
types(iris)
str(iris)
geom_point(mapping = aes(x = Sepal.Length, y =Sepal.width , color = Species)
d
ggplot(data = iris) +
geom_point(mapping = aes(x = Sepal.Length, y =Sepal.width , color = Species))
ggplot(data = iris) +
geom_point(mapping = aes(x = Sepal.Length, y =Sepal.Width , color = Species))
ggplot(data = iris) +
geom_point(mapping = aes(x = Sepal.Length, y =Sepal.Width , color = Species))
ChickWeight
str(ChickWeight)
ggplot(data = iris) +
geom_point(mapping = aes(x = Sepal.Length, y =Sepal.Width , fill = Species))
ggplot(data = iris) +
geom_point(mapping = aes(x = Sepal.Length, y =Sepal.Width , group = Species))
ggplot(data = iris) +
geom_point(mapping = aes(x = Sepal.Length, y =Sepal.Width , color = Species))
ggplot(data = iris) +
geom_point(mapping = aes(x = Sepal.Length, y =Sepal.Width , color = Species), fill = "black")
ggplot(data = iris) +
geom_point(mapping = aes(x = Sepal.Length, y =Sepal.Width , color = Species), fill = "yellow")
geom_point(mapping = aes(x = Sepal.Length, y =Sepal.Width), fill = "black"
ggplot(data = iris) +
geom_point(mapping = aes(x = Sepal.Length, y =Sepal.Width), fill = "black"
)
ggplot(data = iris) +
geom_point(mapping = aes(x = Sepal.Length, y =Sepal.Width), fill = "black")
ggplot(data = iris) +
geom_point(mapping = aes(x = Sepal.Length, y =Sepal.Width), fill = "green")
ggplot(data = iris) +
geom_point(mapping = aes(x = Sepal.Length, y =Sepal.Width), fill = "green")
ggplot(data = iris) +
geom_point(mapping = aes(x = Sepal.Length, y =Sepal.Width), color = "green")
ggplot(data = iris) +
geom_point(mapping = aes(x = Sepal.Length, y =Sepal.Width,color = Species), color = "")
ggplot(data = iris) +
geom_point(mapping = aes(x = Sepal.Length, y =Sepal.Width,color = Species))
ggplot(data = diamods) +
geom_point(mapping = aes(x = clarity, y = price, color = cut))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = clarity, y = price, color = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = clarity, y = price, color = cut))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = clarity, y = price, color = cut), position = "jitter")
summary(diamonds)
diamonds %>% filter(cut = "Ideal")
library(dplyr)
diamonds %>% filter(cut = "Ideal")
diamonds %>% filter(cut = Ideal)
diamonds %>% filter(cut == "Ideal")
diamonds %>% filter(cut == "Ideal" % clarity == "I1")
diamonds %>% filter(cut == "Ideal" % clarity == "l1")
diamonds %>% filter(cut == "Ideal" % clarity == "i1")
diamonds %>% filter(cut == "Ideal" & clarity == "l1")
diamonds %>% filter(cut == "Ideal" & clarity == "I1")
economics["rate"] = economics$unemploy / economics$pop
ggplot(data = economics) +
geom_line(mapping=aes(x = date, y = rate), colo = "black")
{
bloodtype <- c("A","B","O","AB","B","A","B","AB","A","A","A","B","O","A","B","AB","O","O","O","AB","A","B","AB","A","A","B","B","B","O","AB")
gender <- c("M","M","F","F","F","M","M","M","M","F","M","M","F","M","F","F","F","F","M","M","M","F","M","F","M","M","F","F","M","M")
height <- c(178,185,169,160,170,160,156,163,185,149,178,145,150,178,167,165,163,162,157,170,171,178,180,189,172,155,162,168,175,173)
weight <- c(79,89,56,50,74,84,57,49,87,78,60,59,48,80,71,79,105,69,50,69,82,89,93,74,81,74,67,66,54,100)
imf <- cbind(bloodtype,gender,height,weight)
rownames(imf) <- c("NO1","NO2","NO3","NO4","NO5","NO6","NO7","NO8","NO9","NO10","NO11","NO12","NO13","NO14","NO15","NO16","NO17","NO18","NO19","NO20",
"NO21","NO22","NO23","NO24","NO25","NO26","NO27","NO28","NO29","NO30")
imf <- as.data.frame(imf)
imf
}
imf
str(imf)
imf$height <- as.numeric(imf$)
imf$height <- as.numeric(imf$weight)
imf$height <- as.numeric(imf$height)
str(imf)
{
bloodtype <- c("A","B","O","AB","B","A","B","AB","A","A","A","B","O","A","B","AB","O","O","O","AB","A","B","AB","A","A","B","B","B","O","AB")
gender <- c("M","M","F","F","F","M","M","M","M","F","M","M","F","M","F","F","F","F","M","M","M","F","M","F","M","M","F","F","M","M")
height <- c(178,185,169,160,170,160,156,163,185,149,178,145,150,178,167,165,163,162,157,170,171,178,180,189,172,155,162,168,175,173)
weight <- c(79,89,56,50,74,84,57,49,87,78,60,59,48,80,71,79,105,69,50,69,82,89,93,74,81,74,67,66,54,100)
imf <- cbind(bloodtype,gender,height,weight)
rownames(imf) <- c("NO1","NO2","NO3","NO4","NO5","NO6","NO7","NO8","NO9","NO10","NO11","NO12","NO13","NO14","NO15","NO16","NO17","NO18","NO19","NO20",
"NO21","NO22","NO23","NO24","NO25","NO26","NO27","NO28","NO29","NO30")
imf <- as.data.frame(imf)
imf
}
str(imf)
imf$height <- as.numeric(imf$height)
imf$weight <- as.numeric(imf$weight)
str(imf)
gp <- ggplot(data = imf)
gp +
geom_point(mapping = aes(x = weight, y = height, color = gender))
gp +
geom_bar(mapping = aes(x = weight, y = height, color = bloodtype), position = "dodge")
gp +
geom_bar(mapping = aes(x = gender, color = bloodtype), position = "dodge")
install.packages("KoNLP")
install.packages("KoNLP")
library(KoNLP)
install.packages("KoNLP")
library(installr)
check.for.updates.R()
install.packages("KoNLP")
library(KoNLP)
library(KoNlp)
library(KoNLP)
install.packages("multilinguer")
library(multilinguer)
install.packages("askpass")
library(multilinguer)
install_jdk()
install.packages('rJava', type = 'binary');library(rJava);.jinit();rstudioapi::restartSession()
install.packages(c("hash", "tau", "Sejong", "RSQLite", "devtools", "bit", "rex", "lazyeval", "htmlwidgets", "crosstalk", "promises", "later", "sessioninfo", "xopen", "bit64", "blob", "DBI", "memoise", "plogr", "covr", "DT", "rcmdcheck", "rversions"), type = "binary")
install.packages(c("hash", "tau", "Sejong", "RSQLite", "devtools", "bit", "rex", "lazyeval", "htmlwidgets", "crosstalk", "promises", "later", "sessioninfo", "xopen", "bit64", "blob", "DBI", "memoise", "plogr", "covr", "DT", "rcmdcheck", "rversions"), type = "binary")
install.packages(c("hash", "tau", "Sejong", "RSQLite", "devtools", "bit", "rex", "lazyeval", "htmlwidgets", "crosstalk", "promises", "later", "sessioninfo", "xopen", "bit64", "blob", "DBI", "memoise", "plogr", "covr", "DT", "rcmdcheck", "rversions"), type = "binary")
install.packages(c("hash", "tau", "Sejong", "RSQLite", "devtools", "bit", "rex", "lazyeval", "htmlwidgets", "crosstalk", "promises", "later", "sessioninfo", "xopen", "bit64", "blob", "DBI", "memoise", "plogr", "covr", "DT", "rcmdcheck", "rversions"), type = "binary")
install.packages("remotes")
remotes::install_github('haven-jeon/KoNLP', upgrade = "never", INSTALL_opts=c("--no-multiarch"))
library(KoNLP)
library(KoNLP_dic)
library(KoNLP)
install.packages("C:/Users/madda/Downloads/KoNLP_0.80.2.tar.gz", repos = NULL, type = "source")
library(KoNLP)
install.packages("C:/Users/madda/Downloads/KoNLP_0.80.2.tar.gz", repos = NULL, type = "source")
library(KoNLP)
library(KoNLP)
install.package("cli")
install.packages("cli")
install.packages("cli")
install.packages("cli")
library(KoNLP)
extractNoun("나는 어제 학교에서 수업을 들었다다")
setwd("~/동아리/R문서(개인)/텍스트마이닝")
library(KoNLP)
data <-read.table("대통령연설문.txt", header = F)
data <-readLines("대통령연설문.txt")
data <-readLines("대통령연설문.txt", encoding = "UTF-8")
data <-readLines("대통령연설문.txt", encoding = "UTF-8")
data <-readLines("대통령연설문.txt", encoding = "CP949")
data <-readLines("대통령연설문.txt", encoding = "UTF-8")
data <-readLines("대통령연설문.txt", encoding = "UTF-8")
data <-readLines("대통령연설문.txt", encoding = "UTF-8")
data <-readLines("대통령연설문.txt", encoding = "UTF-8")
data <-readLines("대통령연설문.txt", encoding = "UTF-8")
data <-readLines("대통령연설문.txt", encoding = "UTF-8")
data <-readLines("대통령연설문.txt", encoding = "UTF-8")
extractNoun("")
data <-readLines("대통령연설문.txt", encoding = "UTF-8")
extractNoun("")
data <-readLines("대통령연설문.txt", encoding = "UTF-8")
extractNoun("")
data <-readLines("대통령연설문.txt", encoding = "UTF-8")
extractNoun("")
data <-readLines("대통령연설문.txt", encoding = "UTF-8")
extractNoun("")
data <-readLines("대통령연설문.txt", encoding = "UTF-8")
data <-readLines("대통령연설문.txt", encoding = "UTF-8")
data <-readLines("대통령연설문.txt", encoding = "UTF-8")
extractNoun("")
data <-readLines("대통령연설문.txt", encoding = "UTF-8")
extractNoun("")
useSejongDic()
extractNoun("")
data <-readLines("대통령연설문.txt", encoding = "UTF-8")
extractNoun("")
useSejongDic()
useSejongDic()
useSejongDic()
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("cachem")
install.packages("cachem")
install.packages("stringi","ellipsis","vctors")
install.packages("stringi", "ellipsis", "vctors")
useSejongDic()
extractNoun("")
extractNoun(data)
